##1
.data
hellostring:	.ascii "Hello "
		.asciiz "World!\n"

.text

main:
	la	$a0, hellostring
	li	$v0, 4
	syscall

	li	$v0, 10
	syscall


##2
.data
stringstore:	.space 20

.text

main:
	la	$s0, stringstore

	li	$t0, 'H'
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	li	$t0, 'e'
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	li	$t0, 'l'
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	li	$t0, 'o'
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	li	$t0, ' '
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	li	$t0, 'W'
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	li	$t0, 'o'
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	li	$t0, 'r'
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	li	$t0, 'l'
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	li	$t0, 'd'
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	li	$t0, '!'
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	li	$t0, ' '
	sb	$t0, ($s0)
	addi	$s0, $s0, 1

	sb	$zero, ($s0)

	la	$a0, stringstore
	li	$v0, 4
	syscall



##3

.data
array:  .word -4, 5, 8, -1
msg1:   .asciiz "\n The sum of the positive values = "
msg2:   .asciiz "\n The sum of the negative values = "
newline:.asciiz "\n"
        .globl main
        .text
main:
        li $v0, 4                # system call code for print_str
        la $a0, msg1             # load address of msg1. into $a0
        syscall                         # print the string
        la $a0, array           # Initialize address Parameter
        li $a1, 4               # Initialize length Parameter
        jal sum                         # Call sum
        move $a0, $v0           # move value to be printed to $a0
        li $v0, 1                # system call code for print_int
        syscall                         # print sum of Pos:
        li $v0, 4                # system call code for print_str
        la $a0, msg2             # load address of msg2. into $a0
        syscall                         # print the string
        li $v0, 1               # system call code for print_int
        move $a0, $v1            # move value to be printed to $a0
        syscall                         # print sum of neg
        li $v0,4
        la $a0, newline
        syscall
        li $v0, 10              # terminate program run and
        syscall                         # return control to system
sum:     li $v0, 0
        li $v1, 0               # Initialize v0 and v1 to zero
loop:
        blez $a1, retzz                 # If (a1 <= 0) Branch to Return
        addi $a1, $a1, -1       # Decrement loop count
        lw $t0, 0($a0)          # Get a value from the array
        addi $a0, $a0, 4         # Increment array pointer to next word
        bltz $t0, negg           # If value is negative Branch to negg
        add $v0, $v0, $t0       # Add to the positive sum
        b loop                   # Branch around the next two instructions
negg:
        add $v1, $v1, $t0        # Add to the negative sum
        b loop                  # Branch to loop
retzz:  jr $ra                  # Return
